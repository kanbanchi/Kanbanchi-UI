/*  A mixin based on Material Design box shadows with
    5 presets and a strength setting
    Params:
        $z-depth:   shadow distance on z-axis from 1 to 5
        $strength:  multiplier for shadow strength/darkness
        $color:     shadow color
    Sample usage:
        @include material-shadow($z-depth: 3); @include material-shadow(3);
    ==================================================================  */

@mixin material-shadow($z-depth: 1, $strength: 1, $color: $color-base) {
    @if $z-depth == 1 {
        box-shadow: 0 1px 1px rgba($color, $strength * 0.10), 0 1px 2px rgba($color, $strength * 0.17);
    }
    @if $z-depth == 2 {
        box-shadow: 0 3px 6px rgba($color, $strength * 0.16), 0 3px 6px rgba($color, $strength * 0.23);
    }
    @if $z-depth == 3 {
        box-shadow: 0 10px 20px rgba($color, $strength * 0.19), 0 6px 6px rgba($color, $strength * 0.23);
    }
    @if $z-depth == 4 {
        box-shadow: 0 15px 30px rgba($color, $strength * 0.25), 0 10px 10px rgba($color, $strength * 0.22);
    }
    @if $z-depth == 5{
        box-shadow: 0 20px 40px rgba($color, $strength * 0.30), 0 15px 12px rgba($color, $strength * 0.22);
    }
    @if ($z-depth < 1) or ($z-depth > 5) {
        @warn "$z-depth must be between 1 and 5";
    }
}

// Color function (Transparency - Graduation)
// http://css-tricks.com/snippets/sass/tint-shade-functions/

@function calc-color($method, $color, $amount) {
    @if $method == tint {
        @return mix($color, $color-white, $amount);
    }
    @if $method == shade {
        @return mix($color-black, $color, $amount);
    }
    @if $method == fade {
        @return rgba($color, $amount / 100);
    }
}

// Text color based on a background color

@function calc-text-color($color) {
    @if (lightness($color) > 60) {
        @return $color-base; // Lighter backgorund, return dark color
    } @else {
        @return $color-white; // Darker background, return light color
    }
}

@function get-text-color($item){
    @if map-has-key($item, 'text') {
        @return map-get($item, 'text');
    }
    @if map-has-key($item, 'color') {
        @return calc-text-color(map-get($item, 'color'));
    }
    @return $color-base;
}

@function get-label-color($item){
    $labelColor: $color-base;
    @if map-has-key($item, 'text') {
        $labelColor: map-get($item, 'text');
    } @else if map-has-key($item, 'color') {
        $labelColor: calc-text-color(map-get($item, 'color'));
    }
    @if ($labelColor == $color-white) {
        @return calc-color(fade, $color-white, 90);
    }
    @return calc-color(fade, $color-base, 60);
}

//  Hide elements
@mixin hidden {
    display: none !important;
    visibility: hidden;
}

//  Clearfix for floats
@mixin clearfix {
    *zoom: 1;
    &:after,
    &:before {
        display: table;
        content: "";
    }
    &:after {
        clear: both;
    }
}

//  Transition
@mixin transition($transition-property: all, $transition-duration: 0.3s, $transition-timing-function: cubic-bezier(0.23, 1, 0.32, 1), $transition-delay: 0s) {
    transition: $transition-property $transition-duration $transition-timing-function $transition-delay;
}

@mixin wrap {
    max-width: $google-spacing * 122;
    margin: 0 auto;
    padding-left: $google-spacing * 2;
    padding-right: $google-spacing * 2;
}

@mixin wrap-scroll {
    @include wrap;
    max-width: $google-spacing * 122.5;
    padding-right: 0;
    transform: translateX(2px); // compensate 20px scroll on right instead 16px padding

    @media (max-width: $google-spacing * 122) {
        padding-right: $google-spacing * 2;
        transform: none;
    }
}

@mixin wrap-scroll-inner {
    max-width: $google-spacing * 118;
}
