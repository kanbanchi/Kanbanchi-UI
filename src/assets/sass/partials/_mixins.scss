/*  ==================================================================  *\
    Snippets of reusable CSS to develop faster and keep code readable
\*  ==================================================================  */

/*  A mixin based on Material Color Palette  (mixin, sass placeholders, predefined classed)
    https://github.com/minusfive/sass-material-colors

    Params:
        $color-name:     quoted, lower-case, dasherized color name (e.g. 'pink', 'amber')
        $color-variant:  quoted, lowercase color variant (e.g. '200', 'a100')

    Sample usage:
        .my-cool-element {
            color: material-color("cyan", "400");
            background: material-color("blue-grey", "600")
        }
==================================================================  */

@function material-color($color-name, $color-variant: "500", $debug: false) {
    @if ($debug) {
        @warn $color-name, $color-variant;
    }

    $colorMap: map-get($material-colors, $color-name);

    @if ($debug) {
        @warn $colorMap;
    }

    $color: map-get($colorMap, $color-variant);

    @if ($debug) {
        @warn $color;
    }

    @if $color {
        @return $color;
    }
    @else {
        // Libsass still doesn't seem to support @error
        @warn "=> ERROR: COLOR NOT FOUND! <= | Your $color-name, $color-variant combination did not match any of the values in the $material-colors map.";
    }
}

/*  A mixin based on Material Design box shadows with
    5 presets and a strength setting
    Params:
        $z-depth:   shadow distance on z-axis from 1 to 5
        $strength:  multiplier for shadow strength/darkness
        $color:     shadow color
    Sample usage:
        @include material-shadow($z-depth: 3); @include material-shadow(3);
    ==================================================================  */

@mixin material-shadow($z-depth: 1, $strength: 1, $color: $color-base) {
    @if $z-depth == 1 {
        box-shadow: 0 1px 1px rgba($color, $strength * 0.10), 0 1px 2px rgba($color, $strength * 0.17);
    }
    @if $z-depth == 2 {
        box-shadow: 0 3px 6px rgba($color, $strength * 0.16), 0 3px 6px rgba($color, $strength * 0.23);
    }
    @if $z-depth == 3 {
        box-shadow: 0 10px 20px rgba($color, $strength * 0.19), 0 6px 6px rgba($color, $strength * 0.23);
    }
    @if $z-depth == 4 {
        box-shadow: 0 15px 30px rgba($color, $strength * 0.25), 0 10px 10px rgba($color, $strength * 0.22);
    }
    @if $z-depth == 5{
        box-shadow: 0 20px 40px rgba($color, $strength * 0.30), 0 15px 12px rgba($color, $strength * 0.22);
    }
    @if ($z-depth < 1) or ($z-depth > 5) {
        @warn "$z-depth must be between 1 and 5";
    }
}

// Color function (Transparency - Graduation)
// http://css-tricks.com/snippets/sass/tint-shade-functions/

@function calc-color($method, $color, $amount) {
    @if $method == tint {
        @return mix($color, $color-white, $amount);
    }
    @if $method == shade {
        @return mix($color-black, $color, $amount);
    }
    @if $method == fade {
        @return rgba($color, $amount / 100);
    }
}

// Text color based on a background color

@function calc-text-color($color) {
    @if (lightness($color) > 60) {
        @return $color-base // Lighter backgorund, return dark color
    } @else {
        @return $color-white; // Darker background, return light color
    }
}

//  Hide elements
@mixin hidden {
    display: none !important;
    visibility: hidden;
}

//  Clearfix for floats
@mixin clearfix {
    *zoom: 1;
    &:after,
    &:before {
        display: table;
        content: "";
    }
    &:after {
        clear: both;
    }
}

//  Transition
@mixin transition($transition-property: all, $transition-duration: 0.3s, $transition-timing-function: cubic-bezier(0.23, 1, 0.32, 1), $transition-delay: 0s) {
    transition: $transition-property $transition-duration $transition-timing-function $transition-delay;
}
